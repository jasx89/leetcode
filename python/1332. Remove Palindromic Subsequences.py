"""
1332. Remove Palindromic Subsequences

Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'

Case 1. string is empty = 0
Case 2. paindrome, remove string then = 1
Case 3. All others, this case will always have solution 2. Reason being, we can remove all 'a' in one step, then all 'b'.

Suppose, if no 'a' in string in case 3, it gets convrted to case 2.
Suppose, if no 'b' in string in case 3, it gets convrted to case 2.
Suppose, if no 'a' and no 'b' in string in case 3, then is case 1.


"""

class Solution:
    
    def isPalindrome(self, s: str) -> bool:
        i = 0
        j = len(s)-1
        while i<j:
            if s[i]!=s[j]:
                return False
            i += 1
            j -= 1
            
        return True
    
    def removePalindromeSub(self, s: str) -> int:
        if not len(s):
            return 0
        if self.isPalindrome(s):
            return 1
        
        return 2